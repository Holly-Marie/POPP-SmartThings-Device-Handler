/**
 *  POPP Z-Weather
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *	  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
    definition (name: "POPP Z-Weather", namespace: "PoppAndCo", author: "Holly Schöne") {
        capability "Sensor"
        capability "Actuator"
        capability "Battery"
        capability "Configuration"
        capability "Temperature Measurement"

        command "configure"

        attribute "battery", "NUMBER"
        attribute "temperature", "NUMBER"
        attribute "luminance", "NUMBER"
        attribute "relativeHumidity", "NUMBER"
        attribute "windSpeed", "NUMBER"
        attribute "barometricPressure", "NUMBER"
        attribute "dewPoint", "NUMBER"
	attribute "powerLevel", "NUMBER"
	attribute "velocity", "NUMBER"
	attribute "solarRadiation", "NUMBER"
	attribute "airFlow", "NUMBER"
	attribute "rotation", "NUMBER"

        fingerprint mfr: "0154", prod: "0100", model: "0400"
        fingerprint mfr: "0154", inClusters: "0x20,0x31,0x32,0x59,0x70,0x72,0x73,0x80,0x84,0x85,0x86,0x8E,0x8F,0x9B,0x89,0x60,0x5A"
        fingerprint mfr: "0154", prod: "0100", model: "0400", inClusters: "0x20,0x31,0x32,0x59,0x70,0x72,0x73,0x80,0x84,0x85,0x86,0x8E,0x8F,0x9B,0x89,0x60,0x5A"
    }

    tiles (scale: 2) {
        valueTile("temperature", "device.temperature", width: 2, height: 2) {
            state "temperature", label:'Temp\n${currentValue}°C',
                    backgroundColors:[
							// Celsius
							[value: 0, color: "#153591"],
							[value: 7, color: "#1e9cbb"],
							[value: 15, color: "#90d2a7"],
							[value: 23, color: "#44b621"],
							[value: 28, color: "#f1d801"],
							[value: 35, color: "#d04e00"],
							[value: 37, color: "#bc2323"]
                    ]
        }
        valueTile("luminance", "device.luminance", decoration: "flat", width: 2, height: 2) {
            state "luminance", label:'Luminance\n${currentValue}%'
        }
        valueTile("relativeHumidity", "device.relativeHumidity", decoration: "flat", width: 2, height: 2) {
            state "relativeHumidity", label:'Humidity\n${currentValue}%'
        }
        valueTile("windSpeed", "device.windSpeed", decoration: "flat", width: 2, height: 2) {
            state "windSpeed", label:'Wind\n${currentValue}m/s'
        }
        valueTile("barometricPressure", "device.barometricPressure", decoration: "flat", height: 2, width: 2) {
            state "barometricPressure", label:'Barometer\n${currentValue}mBar'
        }
        valueTile("dewPoint", "device.dewPoint", decoration: "flat", height: 2, width: 2) {
            state "dewPoint", label:'Dew Point\n${currentValue}°C'
        }
        valueTile("battery", "device.battery", decoration: "flat", width: 2, height: 2) {
            state "battery", label:'Battery\n${currentValue}%'
        }
	valueTile("powerLevel", "device.powerLevel", decoration: "flat", width: 2, height: 2) {
            state "powerLevel", label:'Power Level\n${currentValue}'
        }
	
	valueTile("velocity", "device.velocity", decoration: "flat", width: 2, height: 2) {
            state "velocity", label:'Velocity\n${currentValue}'
        }
	valueTile("solarRadiation", "device.solarRadiation", decoration: "flat", width: 2, height: 2) {
            state "solarRadiation", label:'Solar Radiation\n${currentValue}'
        }
	valueTile("airFlow", "device.airFlow", decoration: "flat", width: 2, height: 2) {
            state "airFlow", label:'Air Flow\n${currentValue}'
        }
	valueTile("rotation", "device.rotation", decoration: "flat", width: 2, height: 2) {
            state "rotation", label:'Rotation\n${currentValue}'
        }
        
        // the "temperature", "windSpeed", "relativeHumidity" tiles will appear in the Things view
        main(["temperature", "windSpeed", "relativeHumidity"])

        // the "temperature", "windSpeed", "relativeHumidity", "barometricPressure", "luminance", "dewPoint" and "battery" tiles will appear in the Device Details
        // view (order is left-to-right, top-to-bottom)
        details(["temperature", "windSpeed", "relativeHumidity", "barometricPressure", "luminance", "dewPoint", "battery", "powerLevel"])
    }

    preferences {
        input (
                title: "POPP Z-Weather",
                description: "Tap to view the manual.",
                image: "http://www.popp.eu/wp-content/uploads/2015/07/th_Z-Weather_1.png",
                url: "http://www.popp.eu/wp-content/uploads/2016/04/Manual_Z-Weather_POPP_En.pdf",
                type: "href",
                element: "href"
        )

        parameterMap().each {
            input (
                    title: "${it.num}. ${it.title}",
                    description: it.descr,
                    type: "paragraph",
                    element: "paragraph"
            )

            input (
                    name: it.key,
                    title: null,
                    description: "Default: $it.def" ,
                    type: it.type,
                    options: it.options,
                    range: (it.min != null && it.max != null) ? "${it.min}..${it.max}" : null,
                    defaultValue: it.def,
                    required: false
            )
        }

        input ( name: "logging", title: "Logging", type: "boolean", required: false )
    }
}

/*
def setPosition(Integer value) {
    if (device.currentValue("position") > value) {
        sendEvent(name: "windowShade", value: "closing");
        sendEvent(name: "garageDoorControl", value: "closing");
    } else if (device.currentValue("position") < value) {
        sendEvent(name: "windowShade", value: "opening");
        sendEvent(name: "garageDoorControl", value: "opening");
    }
    setFibaro((value > 0) ? value-1 : 0, null)
}

def setSlats(Integer value) {
    setFibaro(null, (value > 0) ? value-1 : 0)
}

def setFibaro(Integer position = null, Integer slats = null) {
    if ( position != null && slats != null ) {
        return "91010f260103${Integer.toHexString(position).padLeft(2,'0')}${Integer.toHexString(slats).padLeft(2,'0')}"
    } else if ( position != null ) {
        return "91010f260102${Integer.toHexString(position).padLeft(2,'0')}00"
    } else if ( slats != null ) {
        return "91010f26010100${Integer.toHexString(slats).padLeft(2,'0')}"
    }
}
*/

def updated() {
    if ( state.lastUpdated && (now() - state.lastUpdated) < 500 ) return
    def cmds = []

    cmds << zwave.associationV2.associationGet(groupingIdentifier: 3) //verify if group 3 association is correct
    cmds << zwave.configurationV2.configurationGet(parameterNumber: 3) //verify if param 3 value is correct

    logging("${device.displayName} - Executing updated()","info")
    runIn(3,"syncStart")
    state.lastUpdated = now()
    response(encapSequence(cmds,1000))
}

def configure() {
    def cmds = []
    cmds << zwave.associationV2.associationSet(groupingIdentifier: 1, nodeId: zwaveHubNodeId)
    cmds << zwave.associationV2.associationSet(groupingIdentifier: 2, nodeId: zwaveHubNodeId)
    cmds << zwave.associationV2.associationSet(groupingIdentifier: 3, nodeId: zwaveHubNodeId)
    cmds << zwave.associationV2.associationSet(groupingIdentifier: 4, nodeId: zwaveHubNodeId)
    cmds << zwave.configurationV2.configurationSet(configurationValue: intToParam(${device.tooMuchWindThreshold}, 1), parameterNumber: 1, size: 1)
    cmds << zwave.configurationV2.configurationSet(configurationValue: intToParam(${device.twilightTreshold}, 1), parameterNumber: 2, size: 1)
    encapSequence(cmds, 1000)
}

private syncStart() {
    boolean syncNeeded = false
    parameterMap().each {
        if(settings."$it.key" != null) {
            if (state."$it.key" == null) { state."$it.key" = [value: null, state: "synced"] }
            if (state."$it.key".value != settings."$it.key" as Integer || state."$it.key".state in ["notSynced","inProgress"]) {
                state."$it.key".value = settings."$it.key" as Integer
                state."$it.key".state = "notSynced"
                syncNeeded = true
            }
        }
    }
    if ( syncNeeded ) {
        logging("${device.displayName} - starting sync.", "info")
        multiStatusEvent("Sync in progress.", true, true)
        syncNext()
    }
}

private syncNext() {
    logging("${device.displayName} - Executing syncNext()","info")
    def cmds = []
    for ( param in parameterMap() ) {
        if ( state."$param.key"?.value != null && state."$param.key"?.state in ["notSynced","inProgress"] ) {
            multiStatusEvent("Sync in progress. (param: ${param.num})", true)
            state."$param.key"?.state = "inProgress"
            cmds << response(encap(zwave.configurationV2.configurationSet(configurationValue: intToParam(state."$param.key".value, param.size), parameterNumber: param.num, size: param.size)))
            cmds << response(encap(zwave.configurationV2.configurationGet(parameterNumber: param.num)))
            break
        }
    }
    if (cmds) {
        runIn(10, "syncCheck")
        sendHubCommand(cmds,1000)
    } else {
        runIn(1, "syncCheck")
    }
}

private syncCheck() {
    logging("${device.displayName} - Executing syncCheck()","info")
    def failed = []
    def incorrect = []
    def notSynced = []
    parameterMap().each {
        if (state."$it.key"?.state == "incorrect" ) {
            incorrect << it
        } else if ( state."$it.key"?.state == "failed" ) {
            failed << it
        } else if ( state."$it.key"?.state in ["inProgress","notSynced"] ) {
            notSynced << it
        }
    }
    if (failed) {
        logging("${device.displayName} - Sync failed! Check parameter: ${failed[0].num}","info")
        sendEvent(name: "syncStatus", value: "failed")
        multiStatusEvent("Sync failed! Check parameter: ${failed[0].num}", true, true)
    } else if (incorrect) {
        logging("${device.displayName} - Sync mismatch! Check parameter: ${incorrect[0].num}","info")
        sendEvent(name: "syncStatus", value: "incomplete")
        multiStatusEvent("Sync mismatch! Check parameter: ${incorrect[0].num}", true, true)
    } else if (notSynced) {
        logging("${device.displayName} - Sync incomplete!","info")
        sendEvent(name: "syncStatus", value: "incomplete")
        multiStatusEvent("Sync incomplete! Open settings and tap Done to try again.", true, true)
    } else {
        logging("${device.displayName} - Sync Complete","info")
        sendEvent(name: "syncStatus", value: "synced")
        multiStatusEvent("Sync OK.", true, true)
    }
}

private multiStatusEvent(String statusValue, boolean force = false, boolean display = false) {
    if (!device.currentValue("multiStatus")?.contains("Sync") || device.currentValue("multiStatus") == "Sync OK." || force) {
        sendEvent(name: "multiStatus", value: statusValue, descriptionText: statusValue, displayed: display)
    }
}

def zwaveEvent(physicalgraph.zwave.commands.configurationv2.ConfigurationReport cmd) {
    if (cmd.parameterNumber != 3) {
        def paramKey = parameterMap().find( {it.num == cmd.parameterNumber } ).key
        logging("${device.displayName} - Parameter ${paramKey} value is ${cmd.scaledConfigurationValue} expected " + state."$paramKey".value, "info")
        state."$paramKey".state = (state."$paramKey".value == cmd.scaledConfigurationValue) ? "synced" : "incorrect"
        syncNext()
    } else {
        logging("${device.displayName} - Parameter 3 value is ${cmd.scaledConfigurationValue} expected 1", "info")
        if ( cmd.scaledConfigurationValue != 1 ) {
            sendHubCommand(response(encap(zwave.configurationV2.configurationSet(configurationValue: intToParam(1, 1), parameterNumber: 3, size: 1))))
        }
    }
}

def zwaveEvent(physicalgraph.zwave.commands.applicationstatusv1.ApplicationRejectedRequest cmd) {
    logging("${device.displayName} - rejected request!","warn")
    for ( param in parameterMap() ) {
        if ( state."$param.key"?.state == "inProgress" ) {
            state."$param.key"?.state = "failed"
            break
        }
    }
}

def zwaveEvent(physicalgraph.zwave.commands.associationv2.AssociationReport cmd) {
    def cmds = []
    if (cmd.groupingIdentifier == 3) {
        if (cmd.nodeId != [zwaveHubNodeId]) {
            log.debug "${device.displayName} - incorrect Association for Group 3! nodeId: ${cmd.nodeId} will be changed to [${zwaveHubNodeId}]"
            cmds << zwave.associationV2.associationRemove(groupingIdentifier: 3)
            cmds << zwave.associationV2.associationSet(groupingIdentifier: 3, nodeId: zwaveHubNodeId)
        } else {
            logging("${device.displayName} - Association for Group 3 correct.","info")
        }
    }
    if (cmds) { [response(encapSequence(cmds, 1000))] }
}

def zwaveEvent(physicalgraph.zwave.commands.basicv1.BasicReport cmd) {
    logging("${device.displayName} - BasicReport received, ignoring $cmd","info")
    //ignore
}

def zwaveEvent(physicalgraph.zwave.commands.switchbinaryv1.SwitchBinarySet cmd) {
    logging("${device.displayName} - SwitchBinarySet received, ignoring $cmd","info")
    //ignore
}

def zwaveEvent(physicalgraph.zwave.commands.switchmultilevelv3.SwitchMultilevelStopLevelChange cmd) {
    logging("${device.displayName} - SwitchMultilevelStopLevelChange received, ignoring {$cmd} ","info")
    //ignore
}

def zwaveEvent(physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport cmd) {
    logging("${device.displayName} - SensorMultilevelReport received, $cmd","info")
    switch (cmd.sensorType) {
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_TEMPERATURE_VERSION_1:
            sendEvent(name: "temperature", value: cmd.scaledSensorValue, unit: "C")
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_LUMINANCE_VERSION_1:
            sendEvent(name: "luminance", value: cmd.scaledSensorValue);
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_RELATIVE_HUMIDITY_VERSION_2:
            sendEvent(name: "relativeHumidity", value: cmd.scaledSensorValue);
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_BAROMETRIC_PRESSURE_VERSION_2:
            sendEvent(name: "barometricPressure", value: cmd.scaledSensorValue);
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_DEW_POINT_VERSION_2:
            sendEvent(name: "dewPoint", value: cmd.scaledSensorValue);
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_VELOCITY_VERSION_2:
            sendEvent(name: "velocity", value: cmd.scaledSensorValue);
	    logging("${device.displayName} - SensorMultilevelReport received VELOCITY = $cmd.scaledSensorValue","info");
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_SOLAR_RADIATION_VERSION_2:
            sendEvent(name: "solarRadiation", value: cmd.scaledSensorValue);
	    logging("${device.displayName} - SensorMultilevelReport received SOLAR_RADIATIO = $cmd.scaledSensorValue","info");
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_AIR_FLOW_VERSION_3:
            sendEvent(name: "airFlow", value: cmd.scaledSensorValue);
	    logging("${device.displayName} - SensorMultilevelReport received AIR_FLOW = $cmd.scaledSensorValue","info");
            break;
        case physicalgraph.zwave.commands.sensormultilevelv5.SensorMultilevelReport.SENSOR_TYPE_ROTATION_V5:
            sendEvent(name: "rotation", value: cmd.scaledSensorValue);
	    logging("${device.displayName} - SensorMultilevelReport received ROTATION = $cmd.scaledSensorValue","info");
            break;
        default:
            break;
    }
}

def zwaveEvent(physicalgraph.zwave.commands.batteryv1.BatteryReport cmd) {
    logging("${device.displayName} - BatteryReport received, $cmd","info")
    sendEvent(name: "battery", value: cmd.batteryLevel)
}

def zwaveEvent(physicalgraph.zwave.commands.powerlevelv1.PowerlevelReport cmd) {
    logging("${device.displayName} - PowerlevelReport received, $cmd","info")
    sendEvent(name: "powerLevel", value: cmd.powerLevel)
}

def zwaveEvent(physicalgraph.zwave.commands.meterv3.MeterReport cmd) {
    logging("${device.displayName} - MeterReport received, value: ${cmd.scaledMeterValue} scale: ${cmd.scale}","info")
    switch (cmd.scale) {
        case 0:
            sendEvent([name: "energy", value: cmd.scaledMeterValue, unit: "kWh"])
            break
        case 2:
            sendEvent([name: "power", value: cmd.scaledMeterValue, unit: "W"])
            break
    }
    multiStatusEvent("${(device.currentValue("power") ?: "0.0")} W | ${(device.currentValue("energy") ?: "0.00")} kWh")
}

def parse(String description) {
    def result = []
    logging("${device.displayName} - Parsing: ${description}")
    if (description.startsWith("Err 106")) {
        result = createEvent(
                descriptionText: "Failed to complete the network security key exchange. If you are unable to receive data from it, you must remove it from your network and add it again.",
                eventType: "ALERT",
                name: "secureInclusion",
                value: "failed",
                displayed: true,
        )
    } else if (description == "updated") {
        return null
    } else {
        def map = descriptionToMap(description)
        if (map?.command == "9101") {
            parseFibaro(map)
        } else {
            def cmd = zwave.parse(description)
            if (cmd) {
                logging("${device.displayName} - Parsed: ${cmd}")
                zwaveEvent(cmd)
            }
        }
    }
}

def descriptionToMap(String description) {
    def result = description.split(',').collectEntries { [(it.split(':')[0].trim()): it.split(':')[1].trim()] }
}

def parseFibaro(map) {
    logging("${device.displayName} - Parsing Fibaro Proprietary command: ${map}")
    def payload = map.payload.split(" ")
    Integer val1 = Integer.parseInt(payload[4], 16)
    Integer val2 = Integer.parseInt(payload[5], 16)
    switch (payload[3]) {
        case "01":
            if (val2 <= 99) { sendEvent(name: "slats", value: (val2 > 0) ? val2+1 : 0 , displayed: false) }
            break
        case "02":
            if (val1 <= 99) { sendEvent(name: "position", value: (val1 > 0) ? val1+1 : 0 , displayed: false) }
            break
        case "03":
            if (val2 <= 99) { sendEvent(name: "slats", value: (val2 > 0) ? val2+1 : 0 , displayed: false) }
            if (val1 <= 99) { sendEvent(name: "position", value: (val1 > 0) ? val1+1 : 0 , displayed: false) }
            break
    }
    switch (val1) {
        case 0:
            sendEvent(name: "windowShade", value: "closed");
            sendEvent(name: "garageDoorControl", value: "closed", displayed: false);
            break;
        case 99..255:
            sendEvent(name: "windowShade", value: "open");
            sendEvent(name: "garageDoorControl", value: "open", displayed: false);
            break;
        default:
            sendEvent(name: "windowShade", value: "partially open");
            sendEvent(name: "garageDoorControl", value: "partially open", displayed: false);
            break;
    }
}

def zwaveEvent(physicalgraph.zwave.commands.securityv1.SecurityMessageEncapsulation cmd) {
    def encapsulatedCommand = cmd.encapsulatedCommand(cmdVersions())
    if (encapsulatedCommand) {
        logging("${device.displayName} - Parsed SecurityMessageEncapsulation into: ${encapsulatedCommand}")
        zwaveEvent(encapsulatedCommand)
    } else {
        log.warn "Unable to extract Secure command from $cmd"
    }
}

def zwaveEvent(physicalgraph.zwave.commands.crc16encapv1.Crc16Encap cmd) {
    def version = cmdVersions()[cmd.commandClass as Integer]
    def ccObj = version ? zwave.commandClass(cmd.commandClass, version) : zwave.commandClass(cmd.commandClass)
    def encapsulatedCommand = ccObj?.command(cmd.command)?.parse(cmd.data)
    if (encapsulatedCommand) {
        logging("${device.displayName} - Parsed Crc16Encap into: ${encapsulatedCommand}")
        zwaveEvent(encapsulatedCommand)
    } else {
        log.warn "Unable to extract CRC16 command from $cmd"
    }
}

private logging(text, type = "debug") {
    if (settings.logging == "true") {
        log."$type" text
    }
}

private secEncap(physicalgraph.zwave.Command cmd) {
    logging("${device.displayName} - encapsulating command using Secure Encapsulation, command: $cmd","info")
    zwave.securityV1.securityMessageEncapsulation().encapsulate(cmd).format()
}

private crcEncap(physicalgraph.zwave.Command cmd) {
    logging("${device.displayName} - encapsulating command using CRC16 Encapsulation, command: $cmd","info")
    zwave.crc16EncapV1.crc16Encap().encapsulate(cmd).format()
}

private encap(physicalgraph.zwave.Command cmd) {
    if (zwaveInfo.zw.contains("s")) {
        secEncap(cmd)
    } else if (zwaveInfo.cc.contains("56")){
        crcEncap(cmd)
    } else {
        logging("${device.displayName} - no encapsulation supported for command: $cmd","info")
        cmd.format()
    }
}

private encapSequence(cmds, Integer delay=250) {
    delayBetween(cmds.collect{ encap(it) }, delay)
}

private List intToParam(Long value, Integer size = 1) {
    def result = []
    size.times {
        result = result.plus(0, (value & 0xFF) as Short)
        value = (value >> 8)
    }
    return result
}

private Map cmdVersions() {
    [0x20: 1,0x31: 6,0x32: 3,0x59: 1,0x70: 1,0x72: 2,0x73: 1,0x80: 1,0x84: 2,0x85: 2,0x86: 2,0x8E: 2,0x8F: 1,0x9B: 1,0x89: 1,0x60: 3,0x5A: 1] // POPP Z-Weather
}

private parameterMap() {[
	[key: "tooMuchWindThreshold", num: 1, size: 1, type: "number", def: 6, min: 0, max: 30 , title: "Threshold for too much wind",
         descr: "Crossing this value on the rising edge, Z-Weather sends a basic set to the associated groups, serves the lifeline and sends a wake up notification. (0 - 30m/s)"],
	[key: "twilightTreshold", num: 2, size: 1, type: "number", def: 37, min: 0, max: 100 , title: "Threshold for twilight",
         descr: "This parameter sets the trigger level for twilight to control devices inassociation group 3 und 4. (0 - 100%)"]
]}
